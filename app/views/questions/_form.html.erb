<%= form_with model: [activity, question], html: { 
    class: "question-form",
    id: "question-form",
    data: { controller: "question-form" }
  } do |form| %>

  <div class="row mb-3">
    <div class="col-md-12">
      <%= form.label :question_type, t('questions.form.question_type') %>
      <%= form.select :question_type, 
          Question::QUESTION_TYPES.map { |type| [t("questions.types.#{type}"), type] }, 
          { selected: question.question_type || 'multiple_choice' }, 
          { 
            class: "form-control question-type-select", 
            id: "question_type_select",
            data: { 
              question_form_target: "questionType",
              action: "change->question-form#toggleFields"
            }
          } 
      %>
    </div>
  </div>
  
  <div class="row mb-3" id="content_field" data-question-form-target="contentField">
    <div class="col-md-12">
      <%= form.label :content, t('questions.form.question_content') %>
      <%= form.text_area :content, 
          class: "form-control", 
          rows: 3,
          id: "content_textarea",
          placeholder: (question.fill_in_blank? ? 
                       t('questions.form.fill_in_blank_placeholder') : 
                       (question.multiple_choice? ? 
                        t('questions.form.multiple_choice_placeholder') : 
                        t('questions.form.content_placeholder'))) %>
      <% if question.errors[:content].any? %>
        <div class="invalid-feedback d-block">
          <%= question.errors[:content].join(", ") %>
        </div>
      <% end %>
    </div>
  </div>

  <div class="row mb-3 fill-in-blank-help" id="fill_in_blank_help" 
       data-question-form-target="fillInBlankHelp" 
       style="display: <%= question.fill_in_blank? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <div class="alert alert-info">
        <%= t('questions.form.fill_in_blank_help_html') %>
      </div>
    </div>
  </div>
  
  <div class="row mb-3 order-sentences-help" id="order_sentences_help" 
       data-question-form-target="orderSentencesHelp" 
       style="display: <%= question.order_sentences? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <div class="alert alert-info">
        <%= t('questions.form.order_sentences_help_html') %>
      </div>
    </div>
  </div>
  
  <div class="row mb-3 order-elements-help" id="order_elements_help" 
       data-question-form-target="orderElementsHelp" 
       style="display: <%= question.order_elements? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <div class="alert alert-info">
        <%= t('questions.form.order_elements_help_html') %>
      </div>
    </div>
  </div>
  
  <div class="row mb-3 multiple-choice-fields" id="multiple_choice_fields" 
       data-question-form-target="multipleChoiceFields" 
       style="display: <%= question.multiple_choice? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <%= form.label :options_text, t('questions.form.options') %>
      <%= form.text_area :options_text, 
          value: question.options&.join(","), 
          class: "form-control", 
          rows: 3,
          placeholder: t('questions.form.options_placeholder') %>
      <small class="form-text text-muted"><%= t('questions.form.options_help') %></small>
    </div>
  </div>
  
  <div class="row mb-3 order-sentences-fields" id="order_sentences_fields" 
       data-question-form-target="orderSentencesFields" 
       style="display: <%= question.order_sentences? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <%= form.label :sentences_content, t('questions.form.sentences') %>
      <%= form.text_area :sentences_content, 
          class: "form-control", 
          rows: 5,
          placeholder: t('questions.form.sentences_placeholder'),
          value: question.order_sentences? ? question.correct_answer&.gsub("|", "\n") : nil %>
      <small class="form-text text-muted"><%= t('questions.form.order_sentences_input_help') %></small>
    </div>
  </div>

  <div class="row mb-3 order-elements-fields" id="order_elements_fields" 
       data-question-form-target="orderElementsFields" 
       style="display: <%= question.order_elements? ? 'block' : 'none' %>;">
    <div class="col-md-12">
      <%= form.label :elements_content, t('questions.form.phrases_to_order') %>
      <div class="phrases-container" id="phrases-container" data-controller="phrases-form">
        <input type="hidden" id="elements_hidden_input" name="question[elements_content]" value="<%= question.order_elements? ? question.correct_answer&.gsub("|", "\n") : nil %>">
        
        <div class="phrases-list" id="phrases-list">
          <!-- As frases serão adicionadas aqui dinamicamente -->
          <% if question.order_elements? && question.correct_answer.present? %>
            <% question.correct_answer.split("|").each do |phrase| %>
              <div class="input-group mb-2 phrase-item">
                <input type="text" class="form-control phrase-input" value="<%= phrase %>" placeholder="<%= t('questions.form.phrase_placeholder') %>">
                <button type="button" class="btn btn-outline-danger remove-phrase">
                  <i class="fas fa-times"></i>
                </button>
              </div>
            <% end %>
          <% else %>
            <div class="input-group mb-2 phrase-item">
              <input type="text" class="form-control phrase-input" placeholder="<%= t('questions.form.phrase_placeholder') %>">
              <button type="button" class="btn btn-outline-danger remove-phrase">
                <i class="fas fa-times"></i>
              </button>
            </div>
          <% end %>
        </div>
        
        <div class="d-flex justify-content-end mb-2">
          <button type="button" class="btn btn-sm btn-outline-primary add-phrase" data-action="click->phrases-form#addPhrase">
            <i class="fas fa-plus"></i> <%= t('questions.form.add_phrase') %>
          </button>
        </div>
      </div>
      <small class="form-text text-muted"><%= t('questions.form.order_elements_help') %></small>
    </div>
  </div>
  
  <div class="row mb-3" id="correct_answer_field" data-question-form-target="correctAnswerField">
    <div class="col-md-12">
      <%= form.label :correct_answer, t('questions.form.correct_answer') %>
      <%= form.text_field :correct_answer, 
          class: "form-control",
          placeholder: t('questions.form.correct_answer_placeholder') %>
      <% if question.errors[:correct_answer].any? %>
        <div class="invalid-feedback d-block">
          <%= question.errors[:correct_answer].join(", ") %>
        </div>
      <% end %>
      <small class="form-text text-muted"><%= t('questions.form.correct_answer_help') %></small>
    </div>
  </div>

  <div class="row">
    <div class="col-md-12">
      <%= form.submit t('common.save'), class: "btn btn-primary" %>
      <% if question.persisted? %>
        <%= link_to t('common.delete'), 
                  activity_question_path(activity, question), 
                  data: { turbo_method: :delete, turbo_confirm: t('common.confirm_delete') },
                  class: "btn btn-outline-danger ms-2" %>
      <% end %>
    </div>
  </div>

  <script>
    // Função para atualizar os campos do formulário
    function setupQuestionForm() {
      const questionTypeSelect = document.getElementById('question_type_select');
      if (!questionTypeSelect) return; // Sai se o select não for encontrado
      
      const multipleChoiceFields = document.getElementById('multiple_choice_fields');
      const fillInBlankHelp = document.getElementById('fill_in_blank_help');
      const orderSentencesHelp = document.getElementById('order_sentences_help');
      const orderSentencesFields = document.getElementById('order_sentences_fields');
      const orderElementsHelp = document.getElementById('order_elements_help');
      const orderElementsFields = document.getElementById('order_elements_fields');
      const correctAnswerField = document.getElementById('correct_answer_field');
      const contentTextarea = document.getElementById('content_textarea');
      
      // Placeholders específicos para cada tipo
      const placeholders = {
        'multiple_choice': '<%= t('questions.form.multiple_choice_placeholder') %>',
        'fill_in_blank': '<%= t('questions.form.fill_in_blank_placeholder') %>',
        'order_sentences': '<%= t('questions.form.content_placeholder') %>',
        'order_elements': '<%= t('questions.form.content_placeholder') %>'
      };
      
      function updateFormFields() {
        const questionType = questionTypeSelect.value;
        console.log('Tipo de questão selecionado:', questionType);
        
        // Esconder todos os campos específicos
        if (multipleChoiceFields) multipleChoiceFields.style.display = 'none';
        if (fillInBlankHelp) fillInBlankHelp.style.display = 'none';
        if (orderSentencesHelp) orderSentencesHelp.style.display = 'none';
        if (orderSentencesFields) orderSentencesFields.style.display = 'none';
        if (orderElementsHelp) orderElementsHelp.style.display = 'none';
        if (orderElementsFields) orderElementsFields.style.display = 'none';
        
        // Mostrar campo de resposta correta por padrão
        if (correctAnswerField) correctAnswerField.style.display = 'block';
        
        // Atualizar o placeholder do campo de conteúdo
        if (contentTextarea && placeholders[questionType]) {
          contentTextarea.placeholder = placeholders[questionType];
        }
        
        // Mostrar campos específicos baseado no tipo
        switch (questionType) {
          case 'multiple_choice':
            if (multipleChoiceFields) multipleChoiceFields.style.display = 'block';
            break;
          case 'fill_in_blank':
            if (fillInBlankHelp) fillInBlankHelp.style.display = 'block';
            break;
          case 'order_sentences':
            if (orderSentencesHelp) orderSentencesHelp.style.display = 'block';
            if (orderSentencesFields) orderSentencesFields.style.display = 'block';
            if (correctAnswerField) correctAnswerField.style.display = 'none';
            break;
          case 'order_elements':
            if (orderElementsHelp) orderElementsHelp.style.display = 'block';
            if (orderElementsFields) orderElementsFields.style.display = 'block';
            if (correctAnswerField) correctAnswerField.style.display = 'none';
            break;
        }
      }
      
      // Configurar evento de mudança
      questionTypeSelect.addEventListener('change', updateFormFields);
      
      // Executar no carregamento inicial
      updateFormFields();
    }
    
    // Registrar para diversos eventos
    document.addEventListener('DOMContentLoaded', setupQuestionForm);
    document.addEventListener('turbo:load', setupQuestionForm);
    document.addEventListener('turbo:render', setupQuestionForm);
    document.addEventListener('turbo:frame-load', setupQuestionForm);
    
    // Executar após um pequeno atraso (garantia adicional)
    setTimeout(setupQuestionForm, 50);
  </script>
<% end %>

